#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('back:server');
var http = require('http');

const { Server } = require("socket.io");
var { Subscriber } = require("../rabbitmq/subscriber");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);
console.log("")
/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 *  Socket
 */

// Socket
const io = new Server(server,{cors:{origin:"*"}});

var subscriber1Options = {
    exchange: "HR_Exchange",
    queueName: "candidature_queue",
    routingKeys: ["candidatures"],
  };

var subscriber2Options = {
    exchange: "HR_Exchange",
    queueName: "demande_reclammation_queue",
    routingKeys: ["reclammations","demands"],
  };
   
function onIncomingMessage(message) {
    console.log("message", message);
    console.log(message);
    const newMessage = JSON.parse(message.content.toString())
    console.log(newMessage);
    if(message.fields.routingKey === 'demands'){
      subscriberDemands.ack(message)
      io.emit("demand",newMessage)
    }
    else if(message.fields.routingKey === 'reclammations'){
      subscriberDemands.ack(message)
      io.emit("reclamation",newMessage)
    } else {
      subscriberCandidature.ack(message)
      io.emit("candidature",newMessage)
    }
}

io.on('connection', (socket) => {
    let previousId;

    const safeJoin = currentId => {
      socket.leave(previousId);
      socket.join(currentId, () => console.log(`Socket ${socket.id} joined room ${currentId}`));
      previousId = currentId;
    };
});

var subscriberCandidature = new Subscriber(subscriber1Options);
var subscriberDemands = new Subscriber(subscriber2Options);
subscriberCandidature.start(onIncomingMessage);
subscriberDemands.start(onIncomingMessage);
