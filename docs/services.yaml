# This file details each team task for the next 2 weeks
# [ name ]  indicates the department involved in the operation
# We will base the problems we mentionned on these operations and departments

# All data structures will be served to each team to keep things
# Server side of certain services can just log or print to file the result
# Databases will be created and forwarded later on ( we can start by using static json objects)
# Words may look terrifying but we just need the minimum not everything needs to be perfect


# in case there is back and front (create 2 folder service-front , service-back)
Tools:
    Dev-Language: Node,Python (for certain services)
    Database: PgSql (MongoDb-atlas for example or anything that fits the problem)
    File-storage: 'io' storage bucket https://min.io/
    VCS: Git and github (https://github.com/ubranisation-GL-2022-2023)
    Containerization: Docker
Work-methodology:
    Code-management-strategy: mono-repository (use of 'nx' https://nx.dev/)
    Branches-management: 
        Main through PR's ( name-team Number/feature) ==> Each team member
        / review his/her's teammate Code before merging
    Communication: 
        Github Issues
        /(https://docs.github.com/en/issues/tracking-your-work-with-issues/quickstart), github pullrequests
        / or facebook.
Teams-management:
    Team-Number: 1
    Team-Members:
        - Wadhah Mahrouk
        - Hamza Mahjoub
    Tasks:
        - maintaining Repository, code, docker files ...
        - validating services logic and workflow.
        - developping if task too big.
        - maintaining report.
Services:
    First-Service:
        Service-Name: Web-portal
        Team-Number: 2
        Team-Members:
            - Ramzi Latrous
            - Wassime Mekni
        Service-Description: Creating the enterprise web portal
        Tasks:
            - RBAC (public user, client, supplier, engineer).
            - Public user can view / consult home page.
            - client can fill in a form to demand a service [Customer Service].
            / leave a comment for the enterprise [Customer Service] [marketing]
            / payment method [Customer Service] [finance].
            - supplier can fill a demand for materials [Supply] [finance] [R&D]
            / can propose an offer [Supply] [finance] [R&D].
            - engineer can check the current progress of the work [engineering]
            / what to do next [engineering].
        Context:
            - Simple design.
            - Simple forms (nothing too complex).
    Second-Service:
        Service-Name: File-transformation-service.
        Team-Number: 3
        Team-Members:
            - Zied Kanoun
            - Yassine Lassoued
        Service-Description: 
            Creating a service that accepts and transform files
            / if it can be written in another language and then integrate it, it will show how good the system
            / handles cross-languages services.
        Tasks:
            - Read different types of files ( EXCEL, PDF, CSV, YAML).
            - Transform those files into a JSON Format that can be exploited by other services
            / [ all departments ] (Document management system).
            - Save them into a database.
        Context:
            - PDF reading and transformation will be OP.
            - I believe the others are very doable with python .
            / (https://www.geeksforgeeks.org/working-with-pdf-files-in-python/).
            - Try implementing it in a desktop application/cli like
    Third-Service:
        Service-Name: Reports-Generation
        Team-Number: 4
        Team-Members:
            - Missa Jaziri
            - Rami Kammoun
        Service-Description: 
            This service takes data in input and generate graphics and charts with ability to generate pdf files
        Tasks:
            - Read data from a JSON file according to needs (finance, research,...).
            - Visualize data for directive board [Direction].
            - Data to be taken in consideration are financial data for [finance], research data for
            / the [R&D] department, personal for the [HR] and marketing data[marketing].
            - generate a pdf of the page.
        Context:
            - keep it simple, max 2 of anything (table, chart, graph ..) it just using libraries
            / techno in relation with Team 3.
            - Data will be simple.
            - Start by using static json structure then we add the database.
            - This service instance will be created as many times as needed between departments
            / (or use conditions).
            - We can start by focusing on 2.
    Fourth-Service:
        Service-Name: Personal-Evaluation-and-registeration
        Team-Number: 5
        Team-Members:
            - Marouene Krichen
            - Taher Marzouk
        Service-Description: 
            This service let you read a cv in pdf format, or form and to rate it, take employees reclamations and demands for day-offs...
        Tasks:
            - Read pdf format or form and generate a review (accept, decline with note) [HR]
            - Reclatmations and demands management [HR]
            - Ensure an RBAC
        Context:
            - Not necessarly that the pdf holds a the true form of a cv or all its details, create it
            / in a way that lets you use it efficiently
            - We mention here the possibility of getting a paper format cv, solution ensured by the form
            - reclamations and demands can be setted in a table and simply accepted or rejected
    Fith-Service:
        Service-Name: Engineering-plan
        Team-Number: 6
        Team-Members:
            - Hamza Hmaidi
            - Marouene Mahou
        Service-Description: 
            Create the house installation plan (hardware to be used, pricing, estimated time to completions ...
        Tasks:
            - Take in input a customer demand
            - Generates the plan for the this demand
            - Inform all engineering departments with requirements and update engineers tasks
        Context:
            - Data in JSON files
            - Plan generation can be through conditions (on surface, budget, place ...)
            - Inform can be a simple print command or JSON file generation
